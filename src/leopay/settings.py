"""
Django settings for leopay project.

Generated by 'django-admin startproject' using Django 2.0.2.

For more information on this file, see
https://docs.djangoproject.com/en/2.0/topics/settings/

For the full list of settings and their values, see
https://docs.djangoproject.com/en/2.0/ref/settings/
"""

import os
# Build paths inside the project like this: os.path.join(BASE_DIR, ...)
from logging.config import dictConfig

import raven

BASE_DIR = os.path.dirname(os.path.dirname(os.path.abspath(__file__)))

# Quick-start development settings - unsuitable for production
# See https://docs.djangoproject.com/en/2.0/howto/deployment/checklist/

# SECURITY WARNING: keep the secret key used in production secret!
SECRET_KEY = ')z$h%nny!*8)@7ppu4sxvwlruk1xij(fstyicldr!=7hdad+=x'

# SECURITY WARNING: don't run with debug turned on in production!
DEBUG = os.environ.get('DEBUG', 'True') == 'True'

ALLOWED_HOSTS = ['*']

BASE_URL = os.environ.get('BASE_URL', 'http://127.0.0.1:8010')

# Application definition

INSTALLED_APPS = [
    'admin_view_permission',
    'flat_responsive',
    'django.contrib.admin',
    'django.contrib.auth',
    'django.contrib.contenttypes',
    'django.contrib.sessions',
    'django.contrib.messages',
    'django.contrib.staticfiles',

    'rest_framework',
    'rest_framework_swagger',
    'django_extensions',
    'django_admin_listfilter_dropdown',
    'rangefilter',
    'import_export',
    'raven.contrib.django.raven_compat',

    'billing',
    'transactions',
    'users',
]

MIDDLEWARE = [
    'django.middleware.security.SecurityMiddleware',
    'django.contrib.sessions.middleware.SessionMiddleware',
    'django.middleware.common.CommonMiddleware',
    'django.middleware.csrf.CsrfViewMiddleware',
    'django.contrib.auth.middleware.AuthenticationMiddleware',
    'django.contrib.messages.middleware.MessageMiddleware',
    'django.middleware.clickjacking.XFrameOptionsMiddleware',
]

ROOT_URLCONF = 'leopay.urls'

TEMPLATES = [
    {
        'BACKEND': 'django.template.backends.django.DjangoTemplates',
        'DIRS': [os.path.join(BASE_DIR, 'templates')],
        'APP_DIRS': True,
        'OPTIONS': {
            'context_processors': [
                'django.template.context_processors.debug',
                'django.template.context_processors.request',
                'django.contrib.auth.context_processors.auth',
                'django.contrib.messages.context_processors.messages',
            ],
            # 'loaders': [
            #     'django.template.loaders.filesystem.Loader',
            #     'django.template.loaders.app_directories.Loader',
            # ]
        },
    },
]

WSGI_APPLICATION = 'wsgi.application'

# Database
# https://docs.djangoproject.com/en/2.0/ref/settings/#databases


DATABASES = {
    'default': {
        'ENGINE': 'django.db.backends.postgresql',
        'NAME': os.environ.get('POSTGRES_DB', 'leopay'),
        'USER': os.environ.get('POSTGRES_USER', 'postgres'),
        'PASSWORD': os.environ.get('POSTGRES_PASSWORD', 'passw0rd'),
        'HOST': os.environ.get('POSTGRES_HOST', 'db'),
        'PORT': os.environ.get('POSTGRES_PORT', '5432'),
    }
} if 'POSTGRES_DB' in os.environ else {
    'default': {
        'ENGINE': 'django.db.backends.sqlite3',
        'NAME': os.path.join(BASE_DIR, 'db.sqlite3'),
    }
}

CACHES = {
    "default": {
        "BACKEND": "django_redis.cache.RedisCache",
        "LOCATION": os.environ.get("REDIS_CONNECTION"),
        "OPTIONS": {
            "CLIENT_CLASS": "django_redis.client.DefaultClient",
        }
    } if "REDIS_CONNECTION" in os.environ else {
        'BACKEND': 'django.core.cache.backends.locmem.LocMemCache',
        'LOCATION': 'rasa-cache',
    }
}

# Password validation
# https://docs.djangoproject.com/en/2.0/ref/settings/#auth-password-validators

AUTH_USER_MODEL = 'users.StaffUser'

AUTH_PASSWORD_VALIDATORS = [
    {
        'NAME': 'django.contrib.auth.password_validation.UserAttributeSimilarityValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.MinimumLengthValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.CommonPasswordValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.NumericPasswordValidator',
    },
]

# Internationalization
# https://docs.djangoproject.com/en/2.0/topics/i18n/

LANGUAGE_CODE = 'ru-RU'

TIME_ZONE = 'Europe/Moscow'
USE_I18N = True
USE_L10N = True
USE_TZ = True

# Static files (CSS, JavaScript, Images)
# https://docs.djangoproject.com/en/2.0/howto/static-files/

STATIC_URL = '/static/'
STATIC_ROOT = os.environ.get('STATIC_ROOT', os.path.join(BASE_DIR, '..', 'static_root'))

# Celery

CELERY_BROKER_URL = BROKER_URL = os.environ.get('BROKER_URL', 'amqp://guest:guest@rabbit:5672/')
CELERY_TASK_DEFAULT_QUEUE = 'default'
CELERY_RETRY_TIMEOUT = int(os.environ.get('CELERY_RETRY_TIMEOUT', 30))

REST_FRAMEWORK = {
    # 'DEFAULT_FILTER_BACKENDS': (
    #     'django_filters.rest_framework.DjangoFilterBackend',
    # ),
    'PAGE_SIZE': 10,
    'DEFAULT_PAGINATION_CLASS': 'rest_framework.pagination.PageNumberPagination'
}

ADMIN_VIEW_PERMISSION_MODELS = [
    'transactions.Transaction',
    'billing.Billing',
    'billing.CounterAgent',
]

# SberBank settings

SBERBANK = {
    'PAYMENT_TIMEOUT': 20,  # minutes
    'ORDER_REGISTER_URL': os.environ.get('URL_REQUEST_REDIRECT', 'https://3dsec.sberbank.ru/payment/rest/register.do'),
    'GET_ORDER_STATUS_URL': os.environ.get('URL_REQUEST', 'https://3dsec.sberbank.ru/payment/rest/getOrderStatus.do'),
    'USERNAME': os.environ.get('USERNAME', 'user'),
    'PASSWORD': os.environ.get('PASSWORD', 'pass'),
    'LANGUAGE': os.environ.get('LANGUAGE', 'ru'),
    'CURRENCY': os.environ.get('CURRENCY', 643),  # RUB
    'PAGEVIEW': os.environ.get('PAGEVIEW', 'DESKTOP'),
    'TIMEOUT': int(os.environ.get('TIMEOUT', 20 * 60))  # sec
}

LOG_DIR = os.path.join(BASE_DIR, 'log')
if not os.path.exists(LOG_DIR):
    os.makedirs(LOG_DIR)

LOGGING = {
    'version': 1,
    'disable_existing_loggers': False,
    'formatters': {
        'task': {
            'format': '[%(asctime)s: %(levelname)s/%(processName)s] %(message)s',
        },
    },
    'handlers': {
        'console': {
            'level': 'DEBUG',
            'class': 'logging.StreamHandler',
        },
        'file': {
            'level': 'DEBUG',
            'class': 'logging.FileHandler',
            'filename': os.path.join(LOG_DIR, 'django.log'),
        },
        'task_console': {
            'level': 'INFO',
            'class': 'logging.StreamHandler',
            'formatter': 'task'
        },
        'task_file': {
            'level': 'DEBUG',
            'class': 'logging.handlers.RotatingFileHandler',
            'filename': os.path.join(LOG_DIR, 'tasks.log'),
            'formatter': 'task',
            'maxBytes': 1024 * 1024 * 20,  # 20 mb
        },
    },
    'loggers': {
        'celery.tasks': {
            'handlers': ['task_console', 'task_file'],
            'level': 'DEBUG' if DEBUG else 'INFO',
        },
        'django': {
            'handlers': ['console', 'file'],
            'level': 'INFO' if DEBUG else 'ERROR',
        }
    }
}

dictConfig(LOGGING)

# RSA settings

RSA_KEY_HOME = os.path.join(BASE_DIR, 'keys')
if not os.path.exists(RSA_KEY_HOME):
    os.makedirs(RSA_KEY_HOME)

RSA_PAYMENT_KEY_LENGTH = 2048
RSA_PAYMENT_PRIV_KEY = 'rsa_pay_priv.key'
RSA_PAYMENT_PUB_KEY = 'rsa_pay_pub.key'

RAVEN_DSN = os.environ.get('RAVEN_DSN', None)
RAVEN_CONFIG = {'dsn': RAVEN_DSN} if RAVEN_DSN is not None else None
